#pragma kernel CSMain

RWTexture2D<float4> HeightMap;
int MapResolution;

int Octaves;
float OctaveAmplitudeFalloff;
float OctaveUVFalloff;
float BaseScale;
float MapScale;
float Compensation;
float HeightScale;

float2 PlaneScale;
float2 PlanePosition;

float2 Unity_GradientNoise_Dir_float(float2 p)
{
    // Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
    p = p % 289;
    // need full precision, otherwise half overflows when p > 1
    float x = float(34 * p.x + 1) * p.x % 289 + p.y;
    x = (34 * x + 1) * x % 289;
    x = frac(x / 41) * 2 - 1;
    return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
}

//Implement own simplex noise, needs to be faster than this
void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
{
    float2 p = UV * Scale;
    float2 ip = floor(p);
    float2 fp = frac(p);
    float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
    float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
    float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
    float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
    fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
    Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float displacement = 0.0f;
    float2 osPosition = (id.xy - MapResolution * 0.5f)/(MapResolution * 0.5f);
    float2 worldSpaceVertex = (float2(osPosition.x * -PlaneScale.x, osPosition.y * -PlaneScale.y) + PlanePosition.xy)/MapScale;

    for(int i = 1; i < Octaves + 1; i++)
    {
        float noise = 0.0f;
        Unity_GradientNoise_float(float2(worldSpaceVertex.x, worldSpaceVertex.y) * OctaveUVFalloff, pow(abs(BaseScale), i + 1), noise);
        displacement += noise * 1.0f/pow(abs(BaseScale), i) * OctaveAmplitudeFalloff;
    }

    displacement = displacement * HeightScale;// - Compensation;
    
    HeightMap[id.xy] = float4(displacement, displacement, displacement, 0);
}
